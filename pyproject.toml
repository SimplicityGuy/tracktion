[project]
name = "tracktion"
version = "0.1.0"
description = "Automated music library management system"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [ "aio-pika>=9.5.7", "aiohttp>=3.12.15", "aioredis>=2.0.1", "apscheduler>=3.11.0", "asyncpg>=0.29.0", "bcrypt>=4.3.0", "fastapi[standard]>=0.116.1", "hiredis>=3.2.1", "lxml>=6.0.1", "neo4j>=5.28.2", "passlib>=1.7.4", "pika>=1.3.2", "prometheus-client>=0.22.1", "psutil>=7.0.0", "psycopg2-binary>=2.9.10", "pyjwt>=2.10.1", "python-dotenv>=1.0.1", "python-multipart>=0.0.20", "redis>=6.4.0", "sqlalchemy>=2.0.43", "sse-starlette>=2.2.1", "structlog>=24.7.0", "uvicorn[standard]>=0.35.0", "websockets>=14.2",]

[build-system]
requires = [ "hatchling",]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
 "httpx>=0.28.1",
 "types-requests>=2.32.4.20250809",
 "types-aiofiles>=24.1.0.20250822",
]

[tool.uv]
dev-dependencies = [
 "aiofiles>=23.0.0",
 "beautifulsoup4>=4.12.0",
 "croniter>=2.0.0",
 "essentia>=2.1b6.dev1389",
 "flask>=3.0.0",
 "mutagen>=1.47.0",
 "mypy==1.17.1",
 "numpy>=2.3.2",
 "pandas>=2.0.0",
 "pybreaker>=1.0.0",
 "pydantic-settings>=2.0.0",
 "pytest>=8.3.4",
 "pytest-asyncio>=0.25.2",
 "pytest-cov>=6.0.0",
 "pytest-mock>=3.12.0",
 "requests>=2.31.0",
 "ruff>=0.8.6",
 "scikit-learn>=1.3.0",
 "tenacity>=8.2.0",
 "types-aiofiles>=24.1.0",
 "types-requests>=2.32.4.20250809",
 "watchdog>=5.0.0",
 "xxhash>=3.0.0",
]

[tool.ruff]
line-length = 120
target-version = "py313"
fix = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
follow_imports = "normal"
namespace_packages = true
explicit_package_bases = true
[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.black]
line-length = 120
target-version = [ "py313",]
include = "\\.pyi?$"
extend-exclude = "\n(\n  /(\n      \\.eggs\n    | \\.git\n    | \\.hg\n    | \\.mypy_cache\n    | \\.tox\n    | \\.venv\n    | _build\n    | buck-out\n    | build\n    | dist\n    | migrations\n  )/\n)\n"

[tool.ruff.lint]
select = [ "B", "C4", "C90", "DTZ", "E", "F", "I", "ISC", "N", "NPY", "PD", "PERF", "PIE", "PL", "PTH", "RET", "RUF", "SIM", "TCH", "TID", "UP", "W",]
ignore = [ "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915", "PLR2004",]
fixable = [ "ALL",]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = [ "tests",]
python_files = [ "test_*.py", "*_test.py",]
python_classes = [ "Test*",]
python_functions = [ "test_*",]
addopts = "\n    -ra\n    --strict-markers\n    --ignore=docs\n    --ignore=setup.py\n    --ignore=ci\n    --ignore=.eggs\n    --tb=short\n    --maxfail=1\n"
markers = [ "slow: marks tests as slow (deselect with '-m \"not slow\"')", "integration: marks tests as integration tests", "unit: marks tests as unit tests", "benchmark: marks tests as benchmark tests",]

[tool.coverage.run]
branch = true
source = [ "tracktion", "services",]
omit = [ "*/tests/*", "*/test_*.py", "*/__pycache__/*", "*/migrations/*", "*/venv/*", "*/.venv/*",]

[tool.coverage.report]
exclude_lines = [ "pragma: no cover", "def __repr__", "if self.debug:", "if settings.DEBUG", "raise AssertionError", "raise NotImplementedError", "if 0:", "if __name__ == .__main__.:", "if TYPE_CHECKING:",]

[tool.ruff.lint.isort]
known-first-party = [ "tracktion", "analysis_service", "cataloging_service", "file_watcher", "file_rename_service", "tracklist_service", "shared", "core_types",]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [ "S101", "PLR2004", "PLR0913",]
"migrations/*" = [ "E501",]
