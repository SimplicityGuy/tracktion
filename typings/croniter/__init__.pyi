"""Type stubs for croniter package."""

from collections.abc import Iterator
from datetime import datetime
from typing import overload

class croniter:  # noqa: N801 - External library type stub must match original name
    def __init__(
        self,
        cron: str,
        start_time: datetime | None = ...,
        ret_type: type = ...,
        day_or: bool = ...,
        max_years_between_matches: int | None = ...,
    ) -> None: ...
    @overload
    def get_next(self, ret_type: type[datetime]) -> datetime: ...
    @overload
    def get_next(self, ret_type: type[float]) -> float: ...
    @overload
    def get_next(self) -> float: ...
    @overload
    def get_prev(self, ret_type: type[datetime]) -> datetime: ...
    @overload
    def get_prev(self, ret_type: type[float]) -> float: ...
    @overload
    def get_prev(self) -> float: ...
    @overload
    def get_current(self, ret_type: type[datetime]) -> datetime: ...
    @overload
    def get_current(self, ret_type: type[float]) -> float: ...
    @overload
    def get_current(self) -> float: ...
    def __iter__(self) -> Iterator[datetime]: ...
    def __next__(self) -> datetime: ...
    @classmethod
    def is_valid(cls, cron: str) -> bool: ...

def croniter_range(
    start: datetime, stop: datetime, cron: str, ret_type: type = ..., exclude_ends: bool = ...
) -> Iterator[datetime]: ...
