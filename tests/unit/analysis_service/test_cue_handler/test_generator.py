"""Unit tests for CUE file generator."""

from pathlib import Path
from typing import Any
from unittest.mock import MagicMock, patch

import pytest

from services.analysis_service.src.cue_handler import (
    CDJGenerator,
    CueDisc,
    CueFile,
    CueFormat,
    CueGenerator,
    CueParser,
    CueTrack,
    KodiGenerator,
    RekordboxGenerator,
    SeratoGenerator,
    TraktorGenerator,
    get_generator,
)


class TestCueGenerator:
    """Tests for the base CueGenerator class."""

    def test_init(self) -> None:
        """Test generator initialization."""
        gen = CueGenerator()
        assert gen.format_type == CueFormat.STANDARD

        gen = CueGenerator(CueFormat.CDJ)
        assert gen.format_type == CueFormat.CDJ

    def test_format_time(self) -> None:
        """Test time formatting to MM:SS:FF."""
        gen = CueGenerator()

        # Test basic conversions
        assert gen._format_time(0) == "00:00:00"
        assert gen._format_time(1000) == "00:01:00"  # 1 second = 75 frames
        assert gen._format_time(60000) == "01:00:00"  # 1 minute

        # Test frame accuracy (75 frames per second)
        assert gen._format_time(13) == "00:00:00"  # Less than 1 frame
        assert gen._format_time(14) == "00:00:01"  # ~1 frame (1000/75 = 13.33)
        assert gen._format_time(500) == "00:00:37"  # 500ms = 37.5 frames

        # Test complex time
        assert gen._format_time(185400) == "03:05:30"  # 3:05.4

    def test_generate_disc_commands(self) -> None:
        """Test disc-level command generation."""
        gen = CueGenerator()

        # Test with minimal disc
        disc = CueDisc()
        lines = gen._generate_disc_commands(disc)
        assert 'REM COMMENT "Generated by Tracktion v1.0"' in lines

        # Test with full disc metadata
        disc = CueDisc(
            title="Test Album",
            performer="Test Artist",
            catalog="1234567890123",
            cdtextfile="cdtext.dat",
            rem_fields={"GENRE": "Electronic", "DATE": "2024"},
        )
        lines = gen._generate_disc_commands(disc)

        # Check order - CATALOG must be first
        assert lines[0] == "CATALOG 1234567890123"
        assert lines[1] == 'CDTEXTFILE "cdtext.dat"'
        assert 'REM GENRE "Electronic"' in lines
        assert 'REM DATE "2024"' in lines
        assert 'TITLE "Test Album"' in lines
        assert 'PERFORMER "Test Artist"' in lines

    def test_generate_track_commands(self) -> None:
        """Test track command generation."""
        gen = CueGenerator()

        # Basic track
        track = CueTrack(
            number=1,
            title="Track Title",
            performer="Track Artist",
            start_time_ms=0,
        )
        lines = gen._generate_track_commands(track)

        assert "  TRACK 01 AUDIO" in lines
        assert '    TITLE "Track Title"' in lines
        assert '    PERFORMER "Track Artist"' in lines
        assert "    INDEX 01 00:00:00" in lines

        # Track with all metadata
        track = CueTrack(
            number=2,
            title="Second Track",
            performer="Another Artist",
            start_time_ms=180000,
            songwriter="Composer Name",
            isrc="USRC17607839",
            flags=["DCP", "PRE"],
            rem_fields={"GENRE": "House", "BPM": "128"},
            pregap_ms=2000,
            postgap_ms=1000,
            indices={0: 178000, 1: 180000},
        )
        lines = gen._generate_track_commands(track)

        assert "  TRACK 02 AUDIO" in lines
        assert "    FLAGS DCP PRE" in lines
        assert '    TITLE "Second Track"' in lines
        assert '    PERFORMER "Another Artist"' in lines
        assert '    SONGWRITER "Composer Name"' in lines
        assert "    ISRC USRC17607839" in lines
        assert '    REM GENRE "House"' in lines
        assert '    REM BPM "128"' in lines
        assert "    PREGAP 00:02:00" in lines
        assert "    INDEX 00 02:58:00" in lines
        assert "    INDEX 01 03:00:00" in lines
        assert "    POSTGAP 00:01:00" in lines

    def test_generate_file_commands(self) -> None:
        """Test FILE command generation."""
        gen = CueGenerator()

        # File without spaces
        cue_file = CueFile(filename="mix.mp3", file_type="MP3", tracks=[])
        lines = gen._generate_file_commands(cue_file)
        assert lines[0] == "FILE mix.mp3 MP3"

        # File with spaces
        cue_file = CueFile(
            filename="my mix.mp3",
            file_type="MP3",
            tracks=[
                CueTrack(1, "Track 1", "Artist 1", 0),
                CueTrack(2, "Track 2", "Artist 2", 180000),
            ],
        )
        lines = gen._generate_file_commands(cue_file)
        assert lines[0] == 'FILE "my mix.mp3" MP3'
        assert "  TRACK 01 AUDIO" in lines
        assert "  TRACK 02 AUDIO" in lines

    def test_generate_complete_cue(self) -> None:
        """Test complete CUE file generation."""
        gen = CueGenerator()

        disc = CueDisc(
            title="Epic Mix",
            performer="DJ Test",
            rem_fields={"GENRE": "Electronic", "DATE": "2024"},
        )

        tracks = [
            CueTrack(1, "Opening", "Artist A", 0),
            CueTrack(2, "Building", "Artist B", 180000),
            CueTrack(3, "Peak Time", "Artist C", 360000),
        ]

        cue_file = CueFile(filename="epic_mix.mp3", file_type="MP3", tracks=tracks)

        cue_content = gen.generate(disc, [cue_file])

        # Verify structure
        assert 'REM GENRE "Electronic"' in cue_content
        assert 'REM DATE "2024"' in cue_content
        assert 'TITLE "Epic Mix"' in cue_content
        assert 'PERFORMER "DJ Test"' in cue_content
        assert "FILE epic_mix.mp3 MP3" in cue_content
        assert "  TRACK 01 AUDIO" in cue_content
        assert "  TRACK 02 AUDIO" in cue_content
        assert "  TRACK 03 AUDIO" in cue_content

        # Validate with parser
        parser = CueParser()
        cue_sheet = parser.parse(cue_content)
        assert cue_sheet.title == "Epic Mix"
        assert cue_sheet.performer == "DJ Test"
        assert len(cue_sheet.get_all_tracks()) == 3

    def test_generate_with_output_path(self, tmp_path: Path) -> None:
        """Test saving CUE file to disk."""
        gen = CueGenerator()
        output_path = tmp_path / "test.cue"

        disc = CueDisc(title="Test", performer="Artist")
        tracks = [CueTrack(1, "Track", "Artist", 0)]
        cue_file = CueFile(filename="test.mp3", tracks=tracks)

        cue_content = gen.generate(disc, [cue_file], output_path)

        # Verify file was created
        assert output_path.exists()
        assert output_path.read_text() == cue_content

    def test_from_tracklist(self) -> None:
        """Test CUE generation from tracklist data."""
        gen = CueGenerator()

        tracklist_data = {
            "title": "Summer Mix 2024",
            "performer": "DJ Summer",
            "genre": "House",
            "year": 2024,
            "source": "1001tracklists.com",
            "filename": "summer_mix_2024.mp3",
            "tracks": [
                {
                    "title": "Summer Vibes",
                    "artist": "Beach House",
                    "start_time": 0,
                    "genre": "Deep House",
                    "bpm": 124,
                },
                {
                    "title": "Sunset Dreams",
                    "artist": "Ocean Drive",
                    "start_time": 240000,
                    "genre": "Progressive House",
                    "bpm": 126,
                },
                {
                    "title": "Night Fever",
                    "artist": "Club Masters",
                    "start_time": 480000,
                    "genre": "Tech House",
                    "bpm": 128,
                },
            ],
        }

        cue_content = gen.from_tracklist(tracklist_data)

        # Verify content
        assert 'TITLE "Summer Mix 2024"' in cue_content
        assert 'PERFORMER "DJ Summer"' in cue_content
        assert 'REM GENRE "House"' in cue_content
        assert 'REM DATE "2024"' in cue_content
        assert 'REM SOURCE "1001tracklists.com"' in cue_content
        assert "FILE summer_mix_2024.mp3 MP3" in cue_content

        # Verify tracks
        assert '    TITLE "Summer Vibes"' in cue_content
        assert '    PERFORMER "Beach House"' in cue_content
        assert '    REM GENRE "Deep House"' in cue_content
        assert '    REM BPM "124"' in cue_content

        # Validate with parser
        parser = CueParser()
        cue_sheet = parser.parse(cue_content)
        tracks = cue_sheet.get_all_tracks()
        assert len(tracks) == 3
        assert tracks[0].title == "Summer Vibes"
        assert tracks[1].title == "Sunset Dreams"
        assert tracks[2].title == "Night Fever"

    def test_determine_file_type(self) -> None:
        """Test file type determination from extension."""
        gen = CueGenerator()

        assert gen._determine_file_type("song.mp3") == "MP3"
        assert gen._determine_file_type("track.wav") == "WAVE"
        assert gen._determine_file_type("audio.flac") == "FLAC"
        assert gen._determine_file_type("music.aiff") == "AIFF"
        assert gen._determine_file_type("file.m4a") == "MP4"
        assert gen._determine_file_type("unknown.xyz") == "BINARY"
        assert gen._determine_file_type("MiXeD.Mp3") == "MP3"  # Case insensitive

    def test_character_limit_enforcement(self) -> None:
        """Test that character limits are enforced."""
        gen = CueGenerator()

        # Test disc title/performer truncation
        long_title = "A" * 100
        long_performer = "B" * 100
        disc = CueDisc(title=long_title, performer=long_performer)

        assert disc.title is not None and len(disc.title) == 80
        assert disc.performer is not None and len(disc.performer) == 80

        # Test track title/performer truncation
        track = CueTrack(
            number=1,
            title="T" * 100,
            performer="P" * 100,
            start_time_ms=0,
        )
        lines = gen._generate_track_commands(track)

        title_line = next(line for line in lines if "TITLE" in line)
        performer_line = next(line for line in lines if "PERFORMER" in line)

        # Extract the actual value (between quotes)
        title_value = title_line.split('"')[1]
        performer_value = performer_line.split('"')[1]

        assert len(title_value) == 80
        assert len(performer_value) == 80


class TestCueTrack:
    """Tests for CueTrack dataclass."""

    def test_valid_track(self) -> None:
        """Test creating a valid track."""
        track = CueTrack(
            number=1,
            title="Test Track",
            performer="Test Artist",
            start_time_ms=0,
        )
        assert track.number == 1
        assert track.title == "Test Track"
        assert track.performer == "Test Artist"
        assert track.indices[1] == 0  # INDEX 01 auto-added

    def test_invalid_track_number(self) -> None:
        """Test track number validation."""
        with pytest.raises(ValueError, match="Track number must be between 1-99"):
            CueTrack(0, "Title", "Artist", 0)

        with pytest.raises(ValueError, match="Track number must be between 1-99"):
            CueTrack(100, "Title", "Artist", 0)

    def test_invalid_isrc(self) -> None:
        """Test ISRC validation."""
        with pytest.raises(ValueError, match="ISRC must be 12 characters"):
            CueTrack(1, "Title", "Artist", 0, isrc="SHORT")

        with pytest.raises(ValueError, match="ISRC must be 12 characters"):
            CueTrack(1, "Title", "Artist", 0, isrc="TOOLONGISRCCODE")

        # Valid ISRC should work
        track = CueTrack(1, "Title", "Artist", 0, isrc="USRC17607839")
        assert track.isrc == "USRC17607839"

    def test_auto_index_01(self) -> None:
        """Test automatic INDEX 01 creation."""
        # Track without indices
        track = CueTrack(1, "Title", "Artist", 5000)
        assert 1 in track.indices
        assert track.indices[1] == 5000

        # Track with explicit INDEX 01
        track = CueTrack(1, "Title", "Artist", 5000, indices={0: 4000, 1: 5000, 2: 10000})
        assert track.indices[1] == 5000

        # Track with other indices but no INDEX 01
        track = CueTrack(1, "Title", "Artist", 5000, indices={0: 4000, 2: 10000})
        assert track.indices[1] == 5000

    def test_valid_flags(self) -> None:
        """Test FLAGS validation."""
        # Valid flags should work
        track = CueTrack(1, "Title", "Artist", 0, flags=["DCP", "PRE"])
        assert track.flags == ["DCP", "PRE"]

        track = CueTrack(1, "Title", "Artist", 0, flags=["4CH", "SCMS"])
        assert track.flags == ["4CH", "SCMS"]

        # Invalid flag should raise error
        with pytest.raises(ValueError, match="Invalid flag 'INVALID'"):
            CueTrack(1, "Title", "Artist", 0, flags=["DCP", "INVALID"])


class TestCueDisc:
    """Tests for CueDisc dataclass."""

    def test_valid_disc(self) -> None:
        """Test creating a valid disc."""
        disc = CueDisc(
            title="Test Album",
            performer="Test Artist",
            catalog="1234567890123",
        )
        assert disc.title == "Test Album"
        assert disc.performer == "Test Artist"
        assert disc.catalog == "1234567890123"

    def test_invalid_catalog(self) -> None:
        """Test catalog validation."""
        with pytest.raises(ValueError, match="Catalog must be 13 digits"):
            CueDisc(catalog="123")

        with pytest.raises(ValueError, match="Catalog must be 13 digits"):
            CueDisc(catalog="12345678901234")

    def test_title_truncation(self) -> None:
        """Test automatic title truncation."""
        long_title = "A" * 100
        disc = CueDisc(title=long_title)
        assert disc.title is not None and len(disc.title) == 80

    def test_performer_truncation(self) -> None:
        """Test automatic performer truncation."""
        long_performer = "B" * 100
        disc = CueDisc(performer=long_performer)
        assert disc.performer is not None and len(disc.performer) == 80


class TestFormatGenerators:
    """Tests for format-specific generators."""

    def test_cdj_generator(self) -> None:
        """Test CDJ format generator."""
        gen = CDJGenerator()
        assert gen.format_type == CueFormat.CDJ

        disc = CueDisc(
            title="CDJ Mix",
            performer="DJ CDJ",
            rem_fields={"GENRE": "Techno", "DATE": "2024"},
        )
        lines = gen._generate_disc_commands(disc)

        # CDJ has limited metadata
        assert 'TITLE "CDJ Mix"' in lines
        assert 'PERFORMER "DJ CDJ"' in lines
        assert 'REM GENRE "Techno"' in lines
        assert 'REM DATE "2024"' in lines

    def test_traktor_generator(self) -> None:
        """Test Traktor format generator."""
        gen = TraktorGenerator()
        assert gen.format_type == CueFormat.TRAKTOR

        track = CueTrack(1, "Traktor Track", "Traktor Artist", 0, rem_fields={"BPM": "128"})
        lines = gen._generate_track_commands(track)

        assert "  TRACK 01 AUDIO" in lines
        assert '    REM BPM "128"' in lines

    def test_serato_generator(self) -> None:
        """Test Serato format generator."""
        gen = SeratoGenerator()
        assert gen.format_type == CueFormat.SERATO

        disc = CueDisc(
            title="Serato Mix",
            performer="DJ Serato",
            rem_fields={"GENRE": "Hip Hop", "DATE": "2024", "DISCID": "12345678"},
        )
        lines = gen._generate_disc_commands(disc)

        assert 'REM COMMENT "Generated by Tracktion v1.0 (Serato-compatible)"' in lines
        assert 'TITLE "Serato Mix"' in lines
        assert 'REM GENRE "Hip Hop"' in lines

    def test_rekordbox_generator(self) -> None:
        """Test Rekordbox format generator."""
        gen = RekordboxGenerator()
        assert gen.format_type == CueFormat.REKORDBOX

        track = CueTrack(
            1,
            "RB Track",
            "RB Artist",
            0,
            rem_fields={
                "BPM": "128",
                "KEY": "8A",
                "GENRE": "House",
                "LABEL": "Test Label",
                "YEAR": "2024",
            },
        )
        lines = gen._generate_track_commands(track)

        assert '    REM BPM "128"' in lines
        assert '    REM KEY "8A"' in lines
        assert '    REM GENRE "House"' in lines
        assert '    REM LABEL "Test Label"' in lines

    def test_kodi_generator(self) -> None:
        """Test Kodi format generator."""
        gen = KodiGenerator()
        assert gen.format_type == CueFormat.KODI

        disc = CueDisc(
            title="Kodi Album",
            performer="Kodi Artist",
            rem_fields={
                "TOTALDISCS": "2",
                "ALBUMARTIST": "Various Artists",
                "COMPILATION": "1",
            },
        )
        lines = gen._generate_disc_commands(disc)

        assert 'REM DISCNUMBER "1"' in lines  # Auto-added
        assert 'REM TOTALDISCS "2"' in lines
        assert 'REM ALBUMARTIST "Various Artists"' in lines
        assert 'REM COMPILATION "1"' in lines
        assert 'REM COMMENT "Generated by Tracktion v1.0 (Kodi-compatible)"' in lines

    def test_get_generator_factory(self) -> None:
        """Test the generator factory function."""
        gen = get_generator(CueFormat.STANDARD)
        assert isinstance(gen, CueGenerator)
        assert gen.format_type == CueFormat.STANDARD

        gen = get_generator(CueFormat.CDJ)
        assert isinstance(gen, CDJGenerator)

        gen = get_generator(CueFormat.TRAKTOR)
        assert isinstance(gen, TraktorGenerator)

        gen = get_generator(CueFormat.SERATO)
        assert isinstance(gen, SeratoGenerator)

        gen = get_generator(CueFormat.REKORDBOX)
        assert isinstance(gen, RekordboxGenerator)

        gen = get_generator(CueFormat.KODI)
        assert isinstance(gen, KodiGenerator)


class TestMultiFileCue:
    """Tests for multi-file CUE generation."""

    def test_multi_file_generation(self) -> None:
        """Test generating a CUE with multiple FILE entries."""
        gen = CueGenerator()

        disc = CueDisc(title="Multi-File Mix", performer="DJ Multi")

        files = [
            CueFile(
                filename="part1.mp3",
                file_type="MP3",
                tracks=[
                    CueTrack(1, "Track 1", "Artist 1", 0),
                    CueTrack(2, "Track 2", "Artist 2", 180000),
                ],
            ),
            CueFile(
                filename="part2.mp3",
                file_type="MP3",
                tracks=[
                    CueTrack(3, "Track 3", "Artist 3", 0),
                    CueTrack(4, "Track 4", "Artist 4", 240000),
                ],
            ),
        ]

        cue_content = gen.generate(disc, files)

        # Verify structure
        assert 'TITLE "Multi-File Mix"' in cue_content
        assert "FILE part1.mp3 MP3" in cue_content
        assert "FILE part2.mp3 MP3" in cue_content
        assert "  TRACK 01 AUDIO" in cue_content
        assert "  TRACK 02 AUDIO" in cue_content
        assert "  TRACK 03 AUDIO" in cue_content
        assert "  TRACK 04 AUDIO" in cue_content

        # Validate with parser
        parser = CueParser()
        cue_sheet = parser.parse(cue_content)
        assert len(cue_sheet.files) == 2
        assert len(cue_sheet.get_all_tracks()) == 4


class TestIntegrationWithTracklist:
    """Tests for integration with Tracklist model."""

    @patch("services.analysis_service.src.cue_handler.generator.Path")
    def test_save_generated_cue_to_tracklist(self, mock_path: MagicMock) -> None:
        """Test saving generated CUE and updating Tracklist."""
        gen = CueGenerator()

        # Mock tracklist data
        tracklist_data = {
            "id": 1,
            "title": "Test Mix",
            "performer": "DJ Test",
            "filename": "test_mix.mp3",
            "tracks": [
                {"title": "Track 1", "artist": "Artist 1", "start_time": 0},
                {"title": "Track 2", "artist": "Artist 2", "start_time": 180000},
            ],
        }

        # Generate CUE
        cue_content = gen.from_tracklist(tracklist_data)

        # Verify content is valid
        assert 'TITLE "Test Mix"' in cue_content
        assert 'PERFORMER "DJ Test"' in cue_content

        # Parse to validate
        parser = CueParser()
        cue_sheet = parser.parse(cue_content)
        assert len(cue_sheet.get_all_tracks()) == 2


class TestRoundTripValidation:
    """Test parsing generated CUE files to ensure consistency."""

    def test_standard_format_round_trip(self) -> None:
        """Test parse → generate → parse cycle for standard format."""
        gen = CueGenerator()
        parser = CueParser()

        # Create a complex CUE
        disc = CueDisc(
            title="Round Trip Test",
            performer="Test Artist",
            catalog="1234567890123",
            rem_fields={"GENRE": "Electronic", "DATE": "2024", "DISCID": "12345678"},
        )

        tracks = [
            CueTrack(
                1,
                "First Track",
                "Artist One",
                0,
                songwriter="Composer A",
                isrc="USRC17607839",
                flags=["DCP"],
                rem_fields={"BPM": "120"},
            ),
            CueTrack(
                2,
                "Second Track",
                "Artist Two",
                240000,
                indices={0: 238000, 1: 240000},
                pregap_ms=2000,
            ),
            CueTrack(
                3,
                "Third Track",
                "Artist Three",
                480000,
                postgap_ms=1000,
            ),
        ]

        cue_file = CueFile(filename="test.mp3", file_type="MP3", tracks=tracks)

        # Generate
        cue_content = gen.generate(disc, [cue_file])

        # Parse
        cue_sheet = parser.parse(cue_content)

        # Verify disc metadata
        assert cue_sheet.title == "Round Trip Test"
        assert cue_sheet.performer == "Test Artist"
        assert cue_sheet.catalog == "1234567890123"
        assert cue_sheet.rem_fields["GENRE"] == "Electronic"

        # Verify tracks
        all_tracks: list[Any] = cue_sheet.get_all_tracks()  # type: ignore[assignment]
        assert len(all_tracks) == 3
        assert all_tracks[0].title == "First Track"
        assert all_tracks[0].performer == "Artist One"
        assert all_tracks[0].songwriter == "Composer A"
        assert all_tracks[0].isrc == "USRC17607839"
        assert "DCP" in all_tracks[0].flags

        assert all_tracks[1].title == "Second Track"
        assert len(all_tracks[1].indices) == 2

        assert all_tracks[2].title == "Third Track"

    def test_all_formats_generate_parseable_cue(self) -> None:
        """Test that all format variants generate parseable CUE files."""
        parser = CueParser()

        disc = CueDisc(title="Format Test", performer="Test DJ")
        tracks = [
            CueTrack(1, "Track One", "Artist A", 0),
            CueTrack(2, "Track Two", "Artist B", 180000),
        ]
        cue_file = CueFile(filename="test.mp3", tracks=tracks)

        formats = [
            CueFormat.STANDARD,
            CueFormat.CDJ,
            CueFormat.TRAKTOR,
            CueFormat.SERATO,
            CueFormat.REKORDBOX,
            CueFormat.KODI,
        ]

        for format_type in formats:
            gen = get_generator(format_type)
            cue_content = gen.generate(disc, [cue_file])

            # Should parse without errors
            cue_sheet = parser.parse(cue_content)
            assert cue_sheet.title == "Format Test"
            assert len(cue_sheet.get_all_tracks()) == 2
