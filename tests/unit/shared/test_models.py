"""Unit tests for SQLAlchemy models."""

import uuid
from datetime import UTC, datetime

from shared.core_types.src.models import Metadata, Recording, Tracklist


class TestRecordingModel:
    """Test Recording model functionality."""

    def test_recording_creation(self):
        """Test creating a Recording instance."""
        recording = Recording(
            file_path="/music/test.mp3",
            file_name="test.mp3",
            sha256_hash="abc123",
            xxh128_hash="def456",
        )

        assert recording.file_path == "/music/test.mp3"
        assert recording.file_name == "test.mp3"
        assert recording.sha256_hash == "abc123"
        assert recording.xxh128_hash == "def456"
        # UUID is generated by database on insert, so it's None before insertion
        assert recording.id is None or isinstance(recording.id, uuid.UUID)

    def test_recording_repr(self):
        """Test Recording string representation."""
        recording = Recording(file_path="/music/test.mp3", file_name="test.mp3")

        repr_str = repr(recording)
        assert "Recording" in repr_str
        assert "test.mp3" in repr_str

    def test_recording_to_dict(self):
        """Test Recording to dictionary conversion."""
        recording = Recording(file_path="/music/test.mp3", file_name="test.mp3", sha256_hash="abc123")
        recording.created_at = datetime(2025, 1, 1, 12, 0, 0, tzinfo=UTC)

        result = recording.to_dict()

        assert result["file_path"] == "/music/test.mp3"
        assert result["file_name"] == "test.mp3"
        assert result["sha256_hash"] == "abc123"
        assert result["xxh128_hash"] is None
        assert "2025-01-01" in result["created_at"]

    def test_recording_relationships(self):
        """Test Recording relationship definitions."""
        recording = Recording(file_path="/test", file_name="test")

        # Relationships should be empty initially
        assert recording.metadata_items == []
        assert recording.tracklist is None


class TestMetadataModel:
    """Test Metadata model functionality."""

    def test_metadata_creation(self):
        """Test creating a Metadata instance."""
        recording_id = uuid.uuid4()
        metadata = Metadata(recording_id=recording_id, key="bpm", value="128")

        assert metadata.recording_id == recording_id
        assert metadata.key == "bpm"
        assert metadata.value == "128"
        # UUID is generated by database on insert
        assert metadata.id is None or isinstance(metadata.id, uuid.UUID)

    def test_metadata_repr(self):
        """Test Metadata string representation."""
        metadata = Metadata(recording_id=uuid.uuid4(), key="genre", value="techno")

        repr_str = repr(metadata)
        assert "Metadata" in repr_str
        assert "genre" in repr_str
        assert "techno" in repr_str

    def test_metadata_to_dict(self):
        """Test Metadata to dictionary conversion."""
        recording_id = uuid.uuid4()
        metadata = Metadata(recording_id=recording_id, key="mood", value="energetic")

        result = metadata.to_dict()

        assert result["recording_id"] == str(recording_id)
        assert result["key"] == "mood"
        assert result["value"] == "energetic"
        assert "id" in result


class TestTracklistModel:
    """Test Tracklist model functionality."""

    def test_tracklist_creation(self):
        """Test creating a Tracklist instance."""
        recording_id = uuid.uuid4()
        tracks = [
            {"title": "Track 1", "artist": "Artist 1", "start_time": "00:00"},
            {"title": "Track 2", "artist": "Artist 2", "start_time": "05:30"},
        ]

        tracklist = Tracklist(
            recording_id=recording_id,
            source="1001tracklists.com",
            tracks=tracks,
            cue_file_path="/music/test.cue",
        )

        assert tracklist.recording_id == recording_id
        assert tracklist.source == "1001tracklists.com"
        assert tracklist.tracks == tracks
        assert tracklist.cue_file_path == "/music/test.cue"
        # UUID is generated by database on insert
        assert tracklist.id is None or isinstance(tracklist.id, uuid.UUID)

    def test_tracklist_repr(self):
        """Test Tracklist string representation."""
        tracklist = Tracklist(recording_id=uuid.uuid4(), source="manual")

        repr_str = repr(tracklist)
        assert "Tracklist" in repr_str
        assert "manual" in repr_str

    def test_tracklist_to_dict(self):
        """Test Tracklist to dictionary conversion."""
        recording_id = uuid.uuid4()
        tracks = [{"title": "Test", "artist": "Artist", "start_time": "00:00"}]

        tracklist = Tracklist(recording_id=recording_id, source="test", tracks=tracks)

        result = tracklist.to_dict()

        assert result["recording_id"] == str(recording_id)
        assert result["source"] == "test"
        assert result["tracks"] == tracks
        assert result["cue_file_path"] is None

    def test_validate_tracks_valid(self):
        """Test track validation with valid data."""
        tracklist = Tracklist(
            recording_id=uuid.uuid4(),
            source="test",
            tracks=[
                {"title": "Track 1", "artist": "Artist 1", "start_time": "00:00"},
                {"title": "Track 2", "artist": "Artist 2", "start_time": "05:30"},
            ],
        )

        assert tracklist.validate_tracks() is True

    def test_validate_tracks_empty(self):
        """Test track validation with empty tracks."""
        tracklist = Tracklist(recording_id=uuid.uuid4(), source="test", tracks=None)

        assert tracklist.validate_tracks() is True

    def test_validate_tracks_invalid_structure(self):
        """Test track validation with invalid structure."""
        tracklist = Tracklist(
            recording_id=uuid.uuid4(),
            source="test",
            tracks="not a list",  # Invalid type
        )

        assert tracklist.validate_tracks() is False

    def test_validate_tracks_missing_fields(self):
        """Test track validation with missing required fields."""
        tracklist = Tracklist(
            recording_id=uuid.uuid4(),
            source="test",
            tracks=[
                {"title": "Track 1", "artist": "Artist 1"},  # Missing start_time
                {"title": "Track 2", "start_time": "05:30"},  # Missing artist
            ],
        )

        assert tracklist.validate_tracks() is False

    def test_validate_tracks_invalid_item_type(self):
        """Test track validation with non-dict items."""
        tracklist = Tracklist(recording_id=uuid.uuid4(), source="test", tracks=["not", "dict", "items"])

        assert tracklist.validate_tracks() is False


class TestModelIntegration:
    """Test model relationships and integrations."""

    def test_uuid_generation(self):
        """Test that UUID generation defaults are configured."""
        recording1 = Recording(file_path="/1", file_name="1")
        recording2 = Recording(file_path="/2", file_name="2")

        # Before database insertion, IDs are None (generated by DB)
        # After insertion they would be unique UUIDs
        # This test validates the model configuration
        assert hasattr(recording1, "id")
        assert hasattr(recording2, "id")

    def test_model_field_types(self):
        """Test that model fields have correct types."""
        recording = Recording(file_path="/test", file_name="test", sha256_hash="hash", xxh128_hash="hash2")

        assert isinstance(recording.file_path, str)
        assert isinstance(recording.file_name, str)
        assert isinstance(recording.sha256_hash, str)
        assert isinstance(recording.xxh128_hash, str)

        metadata = Metadata(recording_id=uuid.uuid4(), key="test", value="value")

        assert isinstance(metadata.recording_id, uuid.UUID)
        assert isinstance(metadata.key, str)
        assert isinstance(metadata.value, str)
