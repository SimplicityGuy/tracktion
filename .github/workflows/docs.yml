# Documentation CI/CD Pipeline
name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'scripts/generate_docs.py'
      - 'services/**/*.py'  # Trigger on code changes for auto-generation
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'scripts/generate_docs.py'
      - 'services/**/*.py'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Validate documentation structure and links
  validate:
    name: Validate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git-revision-date-localized

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          uv sync
          uv pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-git-committers-plugin-2 mkdocs-git-authors-plugin mkdocs-macros-plugin mkdocs-include-markdown-plugin mkdocs-jupyter mike

      - name: Validate MkDocs configuration
        run: uv run mkdocs build --strict --verbose

      - name: Check for broken links
        run: |
          # Install linkchecker
          pip install linkchecker
          # Build docs to temp directory
          uv run mkdocs build --site-dir site_temp
          # Check for broken internal links
          linkchecker --check-extern site_temp/ || true

      - name: Validate auto-generated docs
        run: |
          uv run python scripts/generate_docs.py --validate-only
          # Check if generated docs are up to date
          git diff --exit-code docs/api/ || (echo "Auto-generated docs are out of date. Run 'uv run python scripts/generate_docs.py'" && exit 1)

      - name: Spell check documentation
        uses: rojopolis/spellcheck-github-actions@0.36.0
        with:
          config_path: .spellcheck.yml
          task_name: Markdown

  # Build documentation
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          uv sync
          uv pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-git-committers-plugin-2 mkdocs-git-authors-plugin mkdocs-macros-plugin mkdocs-include-markdown-plugin mkdocs-jupyter mike

      - name: Generate auto-documentation
        run: uv run python scripts/generate_docs.py

      - name: Build documentation
        run: uv run mkdocs build --strict

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: site/
          retention-days: 30

  # Deploy to GitHub Pages (main branch only)
  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          uv sync
          uv pip install mkdocs-material mkdocs-git-revision-date-localized-plugin mkdocs-git-committers-plugin-2 mkdocs-git-authors-plugin mkdocs-macros-plugin mkdocs-include-markdown-plugin mkdocs-jupyter mike

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Generate auto-documentation
        run: uv run python scripts/generate_docs.py

      - name: Deploy with mike (versioned docs)
        run: |
          # Get version from git tag or use 'latest'
          VERSION=${GITHUB_REF_NAME}
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION="latest"
          fi

          # Deploy documentation with versioning
          uv run mike deploy --push --update-aliases $VERSION

          # Set latest as default if deploying a version
          if [[ $VERSION != "latest" ]]; then
            uv run mike set-default --push $VERSION
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'site/'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # PR Preview (for pull requests)
  preview:
    name: Preview Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: site/

      - name: Deploy PR preview
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          destination_dir: preview/pr-${{ github.event.number }}
          keep_files: false

      - name: Comment PR with preview link
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://${owner}.github.io/${repo}/preview/pr-${prNumber}/`;

            const comment = `ðŸ“– Documentation preview is available at: ${previewUrl}`;

            // Check if comment already exists
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('Documentation preview is available')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: comment,
              });
            }

  # Cleanup old PR previews
  cleanup-previews:
    name: Cleanup PR Previews
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove PR preview directory
        run: |
          if [ -d "preview/pr-${{ github.event.number }}" ]; then
            git rm -r "preview/pr-${{ github.event.number }}"
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git commit -m "Remove preview for PR #${{ github.event.number }}"
            git push origin gh-pages
          fi
